1.  C++ Program to Interchange elements of first and last rows in matrix
#include <iostream> 
using namespace std; 
  
#define n 4 
  
void interchangeFirstLast(int m[][n]) 
{ 
        int rows = n; 
          
        // Swapping of element between first 
        // and last rows 
        for (int i = 0; i < n; i++) 
        { 
            int t = m[0][i]; 
            m[0][i] = m[rows - 1][i]; 
            m[rows - 1][i] = t; 
        } 
}  
  
// Driver code 
int main() 
{ 
    // input in the array 
    int m[n][n] = {{8, 9, 7, 6}, 
                   {4, 7, 6, 5}, 
                   {3, 2, 1, 8}, 
                   {9, 9, 7, 7}};  
                  
    interchangeFirstLast(m);  
      
    // Printing the interchanged matrix 
    for (int i = 0; i < n; i++) 
    { 
        for (int j = 0; j < n; j++)  
            cout << m[i][j] << " "; 
        cout << endl; 
    } 



2.Remove first X rows and columns from a matrix


// C++ implementation of the approach
#include <iostream>
using namespace std;
 
const int MAX = 50;
 
// Function to print the matrix after
// ignoring first x rows and columns
void remove_row_col(int arr[][MAX], int n, int x)
{
 
    // Ignore first x rows and columns
    for (int i = x; i < n; i++) {
        for (int j = x; j < n; j++) {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
}
 
// Driver Code
int main()
{
 
    // Order of the square matrix
    int n = 3;
    int arr[][MAX] = { { 1, 2, 3 },
                       { 4, 5, 6 },
                       { 7, 8, 9 } };
 
    int x = 1;
    remove_row_col(arr, n, x);
}


3. Program to find the Product of diagonal elements of a matrix
#include <bits/stdc++.h>
using namespace std;
 
// Function to find the product of diagonals
int productDiagonals(int arr[][100], int n)
{
 
    int product = 1;
    // loop for calculating product of both
    // the principal and secondary diagonals
    for (int i = 0; i < n; i++) {
 
        // For principal diagonal index of row
        // is equal to index of column
        product = product * arr[i][i];
 
        // For secondary diagonal index
        // of column is n-(index of row)-1
        product = product * arr[i][n - i - 1];
    }
 
    // Divide the answer by middle element for
    // matrix of odd size
    if (n % 2 == 1) {
        product = product / arr[n / 2][n / 2];
    }
 
    return product;
}
 
// Driver code
int main()
{
    int arr1[100][100] = { { 1, 2, 3, 4 },
                           { 5, 6, 7, 8 },
                           { 9, 7, 4, 2 },
                           { 2, 2, 2, 1 } };
    // Function calling
    cout << productDiagonals(arr1, 4) << endl;
 
    int arr2[100][100] = { { 2, 1, 2, 1, 2 },
                           { 1, 2, 1, 2, 1 },
                           { 2, 1, 2, 1, 2 },
                           { 1, 2, 1, 2, 1 },
                           { 2, 1, 2, 1, 2 } };
    // Function calling
    cout << productDiagonals(arr2, 5) << endl;
    return 0;
}



4. Program for scalar multiplication of a matrix
#include <stdio.h>
 
// Size of given matrix
#define N 3
 
void scalarProductMat(int mat[][N], int k)
{
    // scalar element is multiplied by the matrix
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            mat[i][j] = mat[i][j] * k;    
}
 
// Driver code
int main()
{
    int mat[N][N] = { { 1, 2, 3 },
                    { 4, 5, 6 },
                    { 7, 8, 9 } };
    int k = 4;
 
    scalarProductMat(mat, k);
 
    // to display the resultant matrix
    printf("Scalar Product Matrix is : \n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%d ", mat[i][j]);
        printf("\n");
    }
 
    return 0;
}

5. Program to check diagonal matrix and scalar matrix
#include <bits/stdc++.h>
#define N 4
using namespace std;
 
// Function to check matrix
// is diagonal matrix or not.
bool isDiagonalMatrix(int mat[N][N])
{
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
 
            // condition to check other elements 
            // except main diagonal are zero or not.
            if ((i != j) && (mat[i][j] != 0))
                return false;
    return true;
}
 
// Driver function
int main()
{
    int mat[N][N] = { { 4, 0, 0, 0 },
                      { 0, 7, 0, 0 },
                      { 0, 0, 5, 0 },
                      { 0, 0, 0, 1 } };
 
    if (isDiagonalMatrix(mat))
        cout << "Yes" << endl;
    else
        cout << "No" << endl;
    return 0;
}
